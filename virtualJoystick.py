import tkinter as tk
import pyvjoy
import math


# Virtual Joystick, to enable robot driving even without the physical joystick
# This code is based on the Virtual Thrustmaster T.16000M FCS Controller
# Generated by ChatGPT, check for errors

# vJoy axes values typically range from 0 to 32767.
AXIS_MAX = 34000

class VirtualThrustmaster:
    def __init__(self, root):
        # Initialize vJoy device (using device ID 1)
        self.joystick = pyvjoy.VJoyDevice(1)
        self.clear_states()

        # Build UI sections
        self.create_stick_canvas(root)
        self.create_twist_slider(root)
        self.create_buttons_frame(root)
        self.create_hat_switch_frame(root)

    def clear_states(self):
        # Center main stick axes and clear button states.
        center_value = AXIS_MAX // 2
        self.joystick.set_axis(pyvjoy.HID_USAGE_X, center_value)
        self.joystick.set_axis(pyvjoy.HID_USAGE_Y, center_value)
        # Remove twist axis (RZ) initialization; instead, set twist axis (Z) to 0.
        self.joystick.set_axis(pyvjoy.HID_USAGE_Z, 0)
        self.joystick.set_cont_pov(1, -1)  # POV neutral
        self.button_states = {}
        for btn in range(1, 17):
            self.button_states[btn] = False
            self.joystick.set_button(btn, 0)
        # Current hat position: default to neutral (grid cell (1,1))
        self.current_hat = (1, 1)

    def create_stick_canvas(self, root):
        # Main stick (X/Y axes) UI
        self.stick_frame = tk.LabelFrame(root, text="Main Stick (X/Y)")
        self.stick_frame.pack(padx=10, pady=10)
        self.canvas_size = 300
        self.canvas = tk.Canvas(self.stick_frame, width=self.canvas_size, height=self.canvas_size, bg="lightgrey")
        self.canvas.pack()

        self.center_x = self.canvas_size // 2
        self.center_y = self.canvas_size // 2
        self.base_radius = 100   # Movement boundary
        self.knob_radius = 10    # Joystick knob size

        # Draw the boundary circle and the knob (initially centered)
        self.canvas.create_oval(self.center_x - self.base_radius, self.center_y - self.base_radius,
                                self.center_x + self.base_radius, self.center_y + self.base_radius,
                                outline="black")
        self.knob = self.canvas.create_oval(self.center_x - self.knob_radius, self.center_y - self.knob_radius,
                                             self.center_x + self.knob_radius, self.center_y + self.knob_radius,
                                             fill="red")
        # Bind dragging events
        self.canvas.bind("<B1-Motion>", self.on_stick_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_stick_release)

    def on_stick_drag(self, event):
        # Compute displacement from center
        dx = event.x - self.center_x
        dy = event.y - self.center_y
        distance = math.sqrt(dx * dx + dy * dy)
        if distance > self.base_radius:
            scale = self.base_radius / distance
            dx *= scale
            dy *= scale
        new_x = self.center_x + dx
        new_y = self.center_y + dy
        self.canvas.coords(self.knob, new_x - self.knob_radius, new_y - self.knob_radius,
                           new_x + self.knob_radius, new_y + self.knob_radius)
         # Invert X-axis displacement
        dx = -dx
        # Map displacement to vJoy axis values (center = AXIS_MAX/2)
        axis_value_x = int(((dx / self.base_radius) + 1) * (AXIS_MAX // 2))
        axis_value_y = int(((-dy / self.base_radius) + 1) * (AXIS_MAX // 2))
        self.joystick.set_axis(pyvjoy.HID_USAGE_X, axis_value_x)
        self.joystick.set_axis(pyvjoy.HID_USAGE_Y, axis_value_y)

    def on_stick_release(self, event):
        # Reset knob to center when released.
        self.canvas.coords(self.knob, self.center_x - self.knob_radius, self.center_y - self.knob_radius,
                           self.center_x + self.knob_radius, self.center_y + self.knob_radius)
        center_value = AXIS_MAX // 2
        self.joystick.set_axis(pyvjoy.HID_USAGE_X, center_value)
        self.joystick.set_axis(pyvjoy.HID_USAGE_Y, center_value)

    def create_twist_slider(self, root):
        # Twist axis (Z) slider with a continuous range and auto-reset on release.
        self.twist_frame = tk.LabelFrame(root, text="Twist Axis")
        self.twist_frame.pack(padx=10, pady=10)
        # Slider now runs from 0 to 10000, with center at 5000.
        self.twist_slider = tk.Scale(self.twist_frame, from_=0, to=10000, resolution=1,
                                     orient=tk.HORIZONTAL, length=300,
                                     command=self.on_twist_change)
        self.twist_slider.set(5000)
        self.twist_slider.pack()
        self.twist_slider.bind("<ButtonRelease-1>", self.on_twist_release)

    def on_twist_change(self, value):
        slider_val = int(value)
        # Map 0-5000 to 10000-5000 and 5000-10000 to 20000-25000.
        if slider_val < 5000:
            twist = 5000 + slider_val
            print(twist)
        elif slider_val > 5000:
            twist = 17000 + (slider_val)
            print(twist)
        else:
            twist = 17000
            print(twist)
        self.joystick.set_axis(pyvjoy.HID_USAGE_Z, twist)

    def on_twist_release(self, event):
        # Reset slider to center and twist axis to 15000.
        self.twist_slider.set(5000)
        self.joystick.set_axis(pyvjoy.HID_USAGE_Z, 15000)

    def create_buttons_frame(self, root):
        # 16 Flightstick buttons with visual toggle feedback.
        self.buttons_frame = tk.LabelFrame(root, text="Flightstick Buttons")
        self.buttons_frame.pack(padx=10, pady=10)
        self.button_widgets = {}
        for i in range(16):
            btn_num = i + 1
            btn = tk.Button(self.buttons_frame, text=f"{btn_num}", width=10,
                            command=lambda b=btn_num: self.toggle_button(b))
            btn.grid(row=i // 4, column=i % 4, padx=5, pady=5)
            self.button_widgets[btn_num] = btn

    def toggle_button(self, btn_num):
        # Toggle button state and change its background color.
        self.button_states[btn_num] = not self.button_states[btn_num]
        self.joystick.set_button(btn_num, int(self.button_states[btn_num]))
        if self.button_states[btn_num]:
            self.button_widgets[btn_num].config(bg="green")
        else:
            self.button_widgets[btn_num].config(bg="SystemButtonFace")

    def create_hat_switch_frame(self, root):
        # Create a 3x3 grid for the hat switch buttons.
        self.hat_frame = tk.LabelFrame(root, text="Hat Switch")
        self.hat_frame.pack(padx=10, pady=10)
        # The keys (row, col) correspond to grid positions.
        self.hat_mapping = {
            (0, 0): ("Up-Left", 31500),
            (0, 1): ("Up", 0),
            (0, 2): ("Up-Right", 4500),
            (1, 0): ("Left", 27000),
            (1, 1): ("Neutral", -1),
            (1, 2): ("Right", 9000),
            (2, 0): ("Down-Left", 22500),
            (2, 1): ("Down", 18000),
            (2, 2): ("Down-Right", 13500)
        }
        self.hat_buttons = {}
        for pos, (label, angle) in self.hat_mapping.items():
            btn = tk.Button(self.hat_frame, text=label, width=10,
                            command=lambda a=angle, p=pos: self.set_hat(a, p))
            btn.grid(row=pos[0], column=pos[1], padx=2, pady=2)
            self.hat_buttons[pos] = btn

        # Hat switch visualization canvas:
        self.hat_canvas_size = 150
        self.hat_canvas = tk.Canvas(self.hat_frame, width=self.hat_canvas_size, height=self.hat_canvas_size, bg="white")
        self.hat_canvas.grid(row=3, column=0, columnspan=3, pady=5)
        self.update_hat_visualization((1, 1))  # Start at neutral

    def set_hat(self, angle, pos):
        # Set the POV hat value and update visual feedback.
        self.joystick.set_cont_pov(1, angle)
        self.current_hat = pos
        # Highlight the pressed hat button; reset others.
        for p, btn in self.hat_buttons.items():
            btn.config(bg="green" if p == pos else "SystemButtonFace")
        self.update_hat_visualization(pos)

    def update_hat_visualization(self, pos):
        # Clear previous visualization.
        self.hat_canvas.delete("arrow")
        center = self.hat_canvas_size / 2
        cell_size = self.hat_canvas_size / 3

        # Calculate the center of the grid cell corresponding to the pressed hat button.
        target_x = pos[1] * cell_size + cell_size / 2
        target_y = pos[0] * cell_size + cell_size / 2

        # If neutral (center cell) then just draw a dot.
        if pos == (1, 1):
            self.hat_canvas.create_oval(center - 5, center - 5, center + 5, center + 5,
                                          fill="black", tags="arrow")
        else:
            # Draw an arrow from the neutral center to the target cell center.
            self.hat_canvas.create_line(center, center, target_x, target_y,
                                          arrow=tk.LAST, fill="red", width=3, tags="arrow")

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Virtual Thrustmaster T.16000M FCS Emulator")
    app = VirtualThrustmaster(root)
    root.mainloop()
