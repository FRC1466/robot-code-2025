plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.1"
    // GitHub versioning
    id "com.peterabeles.gversion" version "1.10"
    // Auto format code
    id "com.diffplug.spotless" version "6.25.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, second is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // Enable VisualVM connection
                    // jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    // jvmArgs.add("-Djava.rmi.server.hostname=10.14.66.2") // Replace TE.AM with team number
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

// Task to watch replay
task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

task updateConstants {
    doLast {
        def constantsPath = "src/main/java/frc/robot/constants/Constants.java"
        def constantsFile = file(constantsPath)
        def constantsText = constantsFile.text
        def matcher = constantsText =~ /public static final boolean CHECK_ROBOT_TYPE\s*=\s*(true|false);/
        def checkRobotType = matcher.find() ? matcher.group(1).toBoolean() : true
        if (!checkRobotType) {
            println "CHECK_ROBOT_TYPE disabled, skipping updateConstants task."
            return
        }

        def robotTypeOptions = ["SIMBOT", "DEVBOT", "COMPBOT"]
        def robotTypeIndex = 0

        // Check if we can get console input
        if (System.console() != null) {
            // Display options
            println "Select robot type:"
            robotTypeOptions.eachWithIndex { type, index ->
                println "${index + 1}. ${type}"
            }

            // Get user input
            def robotTypeInput = System.console().readLine("Enter selection (1-${robotTypeOptions.size()}): ")

            try {
                robotTypeIndex = Integer.parseInt(robotTypeInput) - 1
                if (robotTypeIndex < 0 || robotTypeIndex >= robotTypeOptions.size()) {
                    println "Invalid selection, defaulting to SIMBOT"
                    robotTypeIndex = 0
                }
            } catch (NumberFormatException e) {
                println "Invalid input, defaulting to SIMBOT"
                robotTypeIndex = 0
            }
        } else {
            // If console is not available, use alternative input method
            def scanner = new java.util.Scanner(System.in)

            println "Select robot type:"
            robotTypeOptions.eachWithIndex { type, index ->
                println "${index + 1}. ${type}"
            }

            println "Enter selection (1-${robotTypeOptions.size()}):"

            try {
                if (scanner.hasNextLine()) {
                    def input = scanner.nextLine()
                    robotTypeIndex = Integer.parseInt(input) - 1
                    if (robotTypeIndex < 0 || robotTypeIndex >= robotTypeOptions.size()) {
                        println "Invalid selection, defaulting to SIMBOT"
                        robotTypeIndex = 0
                    }
                }
            } catch (Exception e) {
                println "Error getting input, defaulting to SIMBOT"
                robotTypeIndex = 0
            }
        }

        def robotType = robotTypeOptions[robotTypeIndex]
        println "Setting robot type to: ${robotType}"

        // Update Constants.java
        def fileContent = constantsFile.text.replaceAll(
                /public static final String ROBOT_TYPE = ".*?";/,
                "public static final String ROBOT_TYPE = \"${robotType}\";"
                )
        fileContent = fileContent.replaceAll(
                /private static RobotType robotType = RobotType\.[A-Z]+;/,
                "private static RobotType robotType = RobotType.${robotType};"
                )
        constantsFile.text = fileContent
        println "Updated Constants.java with ROBOT_TYPE = ${robotType}"
    }
}

// Make sure this task runs before compilation
compileJava.dependsOn updateConstants

// Configure test task
test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Create version file
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "frc.robot.constants"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/New_York"
    indent       = "  "
}

// Spotless formatting
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "src/**/*.java"
            exclude "**/build/**", "**/build-*/**", "src/main/java/frc/robot/constants/BuildConstants.java"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader("// Copyright (c) 2025 FRC Team 1466\n// https://github.com/FRC1466\n ")
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}
